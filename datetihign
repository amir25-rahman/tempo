import pandas as pd
from datetime import datetime, timedelta
import pytz
import re

# Function to parse duration strings into timedelta
def parse_duration(duration):
    if not isinstance(duration, str):
        return None  # Return None for invalid duration values

    # Dictionary to store the time values, including months and years
    time_values = {'y': 0, 'mo': 0, 'w': 0, 'd': 0, 'h': 0, 'm': 0}
    
    # Check if the duration is negative (past time)
    negative = False
    if duration.startswith('-'):
        negative = True
        duration = duration[1:]
    
    # Regex to extract numbers and their units (y: years, mo: months, w: weeks, d: days, h: hours, m: minutes)
    matches = re.findall(r'(\d+)([ymowdhm])', duration)
    
    for value, unit in matches:
        if unit == 'y':
            time_values['y'] = int(value)
        elif unit == 'mo':
            time_values['mo'] = int(value)
        elif unit == 'w':
            time_values['w'] = int(value)
        elif unit == 'd':
            time_values['d'] = int(value)
        elif unit == 'h':
            time_values['h'] = int(value)
        elif unit == 'm':
            time_values['m'] = int(value)
    
    # Convert the values into a timedelta
    days_in_year = 365
    days_in_month = 30
    total_days = time_values['y'] * days_in_year + time_values['mo'] * days_in_month + time_values['w'] * 7 + time_values['d']
    
    td = timedelta(days=total_days, hours=time_values['h'], minutes=time_values['m'])
    
    # Return negative timedelta if it's a past duration
    return -td if negative else td

# Function to move date back by one business day
def move_back_one_business_day(date):
    # If the date falls on a Monday, move back to Friday
    if date.weekday() == 0:
        return date - timedelta(days=3)
    # If the date falls on a weekend, move to the previous Friday
    elif date.weekday() == 5:  # Saturday
        return date - timedelta(days=1)
    elif date.weekday() == 6:  # Sunday
        return date - timedelta(days=2)
    else:
        return date - timedelta(days=1)

# Get the current date and time in PST
pst = pytz.timezone('US/Pacific')
now_pst = datetime.now(pst)

# Create a DataFrame with your data
data = {
    'ID': [111, 222, 333, 444, 555, 666, 777, 888, 999, 999],
    'Type': ['AA', 'AA', 'AA', 'BB', 'BB', 'BB', 'BB', 'CC', 'CC', 'CC'],
    'Change': ['BB', 'BB', 'BB', 'CC', 'CC', 'CC', 'CC', 'DD', 'DD', 'DD'],
    'Duration': ['-3w 3d', '25m', '4h 3m', '-5m', '-8h', '-8m', '-5w 2d', '-5mo 2d', '-5y 2mo', '-1y 3mo 2w 3d']
}

df = pd.DataFrame(data)

# Ensure that all durations are strings and handle NaN or invalid values
df['Duration'] = df['Duration'].astype(str)

# Apply the duration parsing, adjust for business days, and add the new 'Exact Date and Time' column
df['Exact Date and Time (PST)'] = df['Duration'].apply(
    lambda x: move_back_one_business_day(now_pst + parse_duration(x)).strftime('%Y-%m-%d %H:%M:%S')
    if parse_duration(x) else 'Invalid Duration'
)

# Display the updated DataFrame
print(df)
