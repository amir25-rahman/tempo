import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Sample data
data = {
    'SoR Name': ['IP', 'API', 'Manual', 'External', 'Internal', 'Xfer', 'API', 'Manual', 
                 'External', 'IP', 'Xfer', 'Manual', 'Internal', 'API', 'External', 'Xfer', 'IP'],
    'Delivery Time': ['4/1/2025 5:16:00 AM', '4/2/2025 4:42:00 AM', '4/3/2025 6:05:00 AM',
                      '4/4/2025 3:58:00 AM', '4/7/2025 5:21:00 AM', '4/8/2025 4:19:00 AM',
                      '4/11/2025 5:48:00 AM', '4/14/2025 6:10:00 AM', '4/18/2025 3:45:00 AM',
                      '5/2/2025 4:27:00 AM', '5/5/2025 5:36:00 AM', '5/9/2025 6:22:00 AM',
                      '5/12/2025 5:09:00 AM', '5/16/2025 4:55:00 AM', '5/20/2025 3:39:00 AM',
                      '5/23/2025 6:15:00 AM', '6/6/2025 5:44:00 AM'],
    'day_of_week': ['Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Monday', 'Tuesday',
                    'Friday', 'Monday', 'Friday', 'Friday', 'Monday', 'Friday',
                    'Monday', 'Friday', 'Tuesday', 'Friday', 'Friday'],
    'month': ['Apr', 'Apr', 'Apr', 'Apr', 'Apr', 'Apr', 'Apr', 'Apr', 'Apr',
              'May', 'May', 'May', 'May', 'May', 'May', 'May', 'Jun']
}

df = pd.DataFrame(data)

# Parse delivery time
df['datetime'] = pd.to_datetime(df['Delivery Time'])
df['time_decimal'] = df['datetime'].dt.hour + df['datetime'].dt.minute / 60

# Create day category
df['day_category'] = df['day_of_week'].apply(lambda x: 'Friday' if x == 'Friday' else 'Mon-Thu')

# Calculate overall averages by SoR, Month, and Day Category
avg_times = df.groupby(['SoR Name', 'month', 'day_category'])['time_decimal'].mean().reset_index()

# Function to convert decimal time to AM/PM format
def decimal_to_time(decimal):
    hours = int(decimal)
    minutes = int((decimal - hours) * 60)
    seconds = int(((decimal - hours) * 60 - minutes) * 60)
    
    period = 'AM' if hours < 12 else 'PM'
    display_hour = hours if hours <= 12 else hours - 12
    display_hour = 12 if display_hour == 0 else display_hour
    
    return f"{display_hour}:{minutes:02d}:{seconds:02d} {period}"

# Get unique SoRs and months
sors = sorted(df['SoR Name'].unique())
months = ['Apr', 'May', 'Jun']

# Create subplots - one per SoR
n_sors = len(sors)
fig, axes = plt.subplots(2, 3, figsize=(18, 10))
axes = axes.flatten()

colors = {'Friday': '#FF6B6B', 'Mon-Thu': '#4ECDC4'}

for idx, sor in enumerate(sors):
    ax = axes[idx]
    
    # Get all months that have data for this SoR
    sor_data = avg_times[avg_times['SoR Name'] == sor]
    sor_months = sor_data['month'].unique()
    
    # Prepare data for grouped bars
    x = np.arange(len(months))
    width = 0.35
    
    friday_vals = []
    monThu_vals = []
    
    for month in months:
        month_data = sor_data[sor_data['month'] == month]
        
        friday_val = month_data[month_data['day_category'] == 'Friday']['time_decimal'].values
        monThu_val = month_data[month_data['day_category'] == 'Mon-Thu']['time_decimal'].values
        
        friday_vals.append(friday_val[0] if len(friday_val) > 0 else 0)
        monThu_vals.append(monThu_val[0] if len(monThu_val) > 0 else 0)
    
    # Create bars
    bars1 = ax.bar(x - width/2, friday_vals, width, label='Friday', 
                   color=colors['Friday'], alpha=0.85, edgecolor='black', linewidth=1.5)
    bars2 = ax.bar(x + width/2, monThu_vals, width, label='Mon-Thu', 
                   color=colors['Mon-Thu'], alpha=0.85, edgecolor='black', linewidth=1.5)
    
    # Add value labels on bars
    for i, (f_val, m_val) in enumerate(zip(friday_vals, monThu_vals)):
        if f_val > 0:
            time_str = decimal_to_time(f_val)
            ax.text(i - width/2, f_val + 0.15, time_str, 
                   ha='center', va='bottom', fontsize=10, fontweight='bold',
                   color='#8B0000')
        if m_val > 0:
            time_str = decimal_to_time(m_val)
            ax.text(i + width/2, m_val + 0.15, time_str, 
                   ha='center', va='bottom', fontsize=10, fontweight='bold',
                   color='#006666')
    
    ax.set_title(f'{sor}', fontsize=14, fontweight='bold', pad=15)
    ax.set_xlabel('Month', fontsize=11, fontweight='bold')
    ax.set_ylabel('Delivery Time', fontsize=11, fontweight='bold')
    ax.set_xticks(x)
    ax.set_xticklabels(months, fontsize=11)
    ax.grid(axis='y', alpha=0.3, linestyle='--', linewidth=1)
    ax.legend(loc='upper right', fontsize=10, frameon=True, fancybox=True, shadow=True)
    
    # Format y-axis with time labels
    all_vals = [v for v in friday_vals + monThu_vals if v > 0]
    if len(all_vals) > 0:
        y_min = max(0, int(min(all_vals)) - 1)
        y_max = int(max(all_vals)) + 2
        y_ticks = range(y_min, y_max)
        y_labels = [decimal_to_time(y) for y in y_ticks]
        ax.set_yticks(y_ticks)
        ax.set_yticklabels(y_labels, fontsize=9)
        ax.set_ylim(y_min, y_max)
    
    # Add subtle background
    ax.set_facecolor('#F8F9FA')

# Hide extra subplot if odd number of SoRs
if n_sors < len(axes):
    for idx in range(n_sors, len(axes)):
        axes[idx].axis('off')

plt.suptitle('Average Delivery Times: Friday vs Mon-Thu by System of Record and Month', 
             fontsize=16, fontweight='bold', y=0.995)
plt.tight_layout()
plt.show()
