import pandas as pd
import matplotlib.pyplot as plt

# Sample data
data = {
    "APP": ["A", "A", "B", "B", "C", "A"],
    "File_Date": ["1/5/2025", "1/10/2025", "1/7/2025", "2/1/2025", "2/5/2025", "2/1/2025"],
    "Delivery_Time": ["3:40:00 AM", "4:20:00 AM", "2:15:00 AM", "3:50:00 AM", "1:10:00 AM", "3:50:00 AM"]
}

df = pd.DataFrame(data)

# Convert dates
df["File_Date"] = pd.to_datetime(df["File_Date"])
df["Month"] = df["File_Date"].dt.strftime("%b")   # e.g., Jan, Feb

# Convert Delivery_Time to minutes since midnight
df["Delivery_Minutes"] = pd.to_datetime(df["Delivery_Time"]).dt.hour * 60 + pd.to_datetime(df["Delivery_Time"]).dt.minute

# Group by Month + APP and take average
avg_times = df.groupby(["Month", "APP"])["Delivery_Minutes"].mean().reset_index()

# Convert back to HH:MM:SS AM/PM format
avg_times["Avg_Delivery_Time"] = pd.to_datetime(avg_times["Delivery_Minutes"], unit="m").dt.strftime("%I:%M:%S %p")
##############################################################################################

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Create the dataframe
data = {
    'Month': ['Feb', 'Feb', 'Feb', 'Jan', 'Jan'],
    'APP': ['A', 'B', 'C', 'A', 'B'],
    'Delivery_Minutes': [230.0, 230.0, 70.0, 240.0, 135.0],
    'Avg_Delivery_Time': ['03:50:00', '03:50:00', '01:10:00', '04:00:00', '02:15:00']
}
df = pd.DataFrame(data)

# Function to convert minutes to time format
def minutes_to_time(minutes):
    if pd.isna(minutes):
        return 'N/A'
    hours = int(minutes // 60)
    mins = int(minutes % 60)
    secs = int((minutes % 1) * 60)
    return f"{hours:02d}:{mins:02d}:{secs:02d}"

# Pivot the data to get APP as columns and Month as rows
pivot_df = df.pivot(index='Month', columns='APP', values='Delivery_Minutes')

# Sort by month order (Jan, Feb)
month_order = ['Jan', 'Feb']
pivot_df = pivot_df.reindex(month_order)

# Fill NaN with 0 for plotting purposes
pivot_df_plot = pivot_df.fillna(0)

# Create the visualization
fig, ax = plt.subplots(figsize=(12, 7))

# Set up bar positions
x = np.arange(len(month_order))
width = 0.25
apps = pivot_df.columns.tolist()
colors = ['#3498db', '#e74c3c', '#2ecc71']

# Create bars for each APP
for i, app in enumerate(apps):
    values = pivot_df_plot[app].values
    bars = ax.bar(x + i * width, values, width, label=f'APP {app}', 
                   color=colors[i], alpha=0.8, edgecolor='black')
    
    # Add value labels on bars (only for non-zero values)
    for j, bar in enumerate(bars):
        height = bar.get_height()
        if height > 0:  # Only label bars with actual data
            time_str = minutes_to_time(height)
            ax.text(bar.get_x() + bar.get_width()/2., height,
                   f'{time_str} AM',
                   ha='center', va='bottom', fontsize=9, fontweight='bold')

ax.set_xlabel('Month', fontsize=12, fontweight='bold')
ax.set_ylabel('Delivery Time', fontsize=12, fontweight='bold')
ax.set_title('Average Delivery Time per Month by APP', fontsize=14, fontweight='bold', pad=20)
ax.set_xticks(x + width)
ax.set_xticklabels(month_order)
ax.legend(title='Application', fontsize=10, title_fontsize=11)
ax.grid(axis='y', alpha=0.3, linestyle='--')

# Add horizontal line at 3:00:00 AM (180 minutes)
ax.axhline(y=180, color='red', linestyle='--', linewidth=2, label='3:00:00 AM Target', alpha=0.7)

# Format Y-axis to show time format
max_value = pivot_df_plot.max().max()
y_tick_interval = 60  # 1 hour intervals
y_ticks = np.arange(0, max_value + y_tick_interval, y_tick_interval)
y_labels = [minutes_to_time(y) for y in y_ticks]
ax.set_yticks(y_ticks)
ax.set_yticklabels(y_labels)
ax.set_ylim(0, max_value * 1.15)

plt.tight_layout()
plt.show()

# Print summary statistics
print("\n=== Summary Statistics by Month and APP ===")
print("\nDelivery Time by Month and APP:")
pivot_time = pivot_df.applymap(lambda x: minutes_to_time(x) if not pd.isna(x) else 'N/A')
print(pivot_time.to_string())

print("\n\nAverage by Month (across all APPs):")
for month in month_order:
    avg = df[df['Month'] == month]['Delivery_Minutes'].mean()
    print(f"{month}: {minutes_to_time(avg)} AM")

print("\n\nAverage by APP (across all months):")
for app in sorted(df['APP'].unique()):
    avg = df[df['APP'] == app]['Delivery_Minutes'].mean()
    count = len(df[df['APP'] == app])
    print(f"APP {app}: {minutes_to_time(avg)} AM - {count} record(s)")

print(f"\n\nOverall Average: {minutes_to_time(df['Delivery_Minutes'].mean())} AM")
