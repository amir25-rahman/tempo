import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# ---------- Sample data ----------
data = {
    'Month': ['Jan','Jan','Feb','Feb','Mar','Mar','Apr','May','Jun','Jul','Aug','Sep'],
    'SoR Name': ['A','B','A','B','A','B','A','A','B','A','B','A'],
    'Delivery_Time': ['3:40:00 AM','4:00:00 AM','3:30:00 AM','3:50:00 AM',
                      '4:10:00 AM','3:55:00 AM','3:50:00 AM','4:00:00 AM',
                      '4:05:00 AM','4:15:00 AM','4:00:00 AM','4:20:00 AM']
}
df = pd.DataFrame(data)

# ---------- Helper functions ----------
def time_to_minutes(tstr):
    if pd.isna(tstr):
        return np.nan
    t = pd.to_datetime(tstr, format='%I:%M:%S %p', errors='coerce')
    if pd.isna(t):
        return np.nan
    return t.hour*60 + t.minute + t.second/60

def minutes_to_hhmmss_ampm(minutes):
    if pd.isna(minutes):
        return "N/A"
    hours24 = int(minutes // 60)
    mins = int(minutes % 60)
    ampm = 'AM' if hours24 < 12 else 'PM'
    hours12 = hours24 % 12
    if hours12 == 0:
        hours12 = 12
    return f"{hours12:02d}:{mins:02d}:00 {ampm}"

# Convert Delivery_Time to numeric minutes
df['Minutes'] = df['Delivery_Time'].apply(time_to_minutes)

# ---------- Plot with Seaborn ----------
sns.set_style("whitegrid")
plt.figure(figsize=(12,6))

# Bar plot: x=SoR, y=Minutes, hue=Month
bar_plot = sns.barplot(
    data=df, 
    x='SoR Name', 
    y='Minutes', 
    hue='Month', 
    palette='tab20', 
    ci=None
)

# Add labels on bars
for p in bar_plot.patches:
    height = p.get_height()
    if not np.isnan(height):
        bar_plot.annotate(
            minutes_to_hhmmss_ampm(height),
            (p.get_x() + p.get_width() / 2., height),
            ha='center', va='bottom',
            fontsize=8,
            rotation=90
        )

# Labels and title
plt.ylabel("Delivery Time")
plt.xlabel("SoR Name")
plt.title("Delivery Time per SoR (Jan - Sep)")
plt.legend(title="Month", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()



#####################################################################
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# ---------- Sample data ----------
data = {
    'Month': ['Jan','Jan','Feb','Feb','Mar','Mar','Apr','May','Jun','Jul','Aug','Sep'],
    'SoR Name': ['A','B','A','B','A','B','A','A','B','A','B','A'],
    'Delivery_Time': ['3:40:00 AM','4:00:00 AM','3:30:00 AM','3:50:00 AM',
                      '4:10:00 AM','3:55:00 AM','3:50:00 AM','4:00:00 AM',
                      '4:05:00 AM','4:15:00 AM','4:00:00 AM','4:20:00 AM']
}
df = pd.DataFrame(data)

# ---------- Helper functions ----------
def time_to_minutes(tstr):
    if pd.isna(tstr):
        return np.nan
    t = pd.to_datetime(tstr, format='%I:%M:%S %p', errors='coerce')
    if pd.isna(t):
        return np.nan
    return t.hour*60 + t.minute + t.second/60

def minutes_to_hhmmss_ampm(minutes):
    if pd.isna(minutes):
        return "N/A"
    hours24 = int(minutes // 60)
    mins = int(minutes % 60)
    ampm = 'AM' if hours24 < 12 else 'PM'
    hours12 = hours24 % 12
    if hours12 == 0:
        hours12 = 12
    return f"{hours12:02d}:{mins:02d}:00 {ampm}"

# Convert Delivery_Time to numeric minutes
df['Minutes'] = df['Delivery_Time'].apply(time_to_minutes)

# ---------- Clustered scatter plot ----------
sns.set_style("whitegrid")
plt.figure(figsize=(12,6))

# Stripplot for clustered scatter
sns.stripplot(
    data=df,
    x='SoR Name',
    y='Minutes',
    hue='Month',
    dodge=True,             # cluster by SoR
    palette='tab20',
    size=10,                # marker size
    jitter=True             # slight horizontal jitter for clarity
)

# Annotate points with hh:mm:ss labels
for i in range(df.shape[0]):
    x = df['SoR Name'].iloc[i]
    y = df['Minutes'].iloc[i]
    month = df['Month'].iloc[i]
    plt.text(
        x=x, y=y, s=minutes_to_hhmmss_ampm(y),
        ha='center', va='bottom', fontsize=8
    )

plt.xlabel("SoR Name")
plt.ylabel("Delivery Time")
plt.title("Delivery Time per SoR (Jan - Sep) - Scatter")
plt.legend(title="Month", bbox_to_anchor=(1.05,1), loc='upper left')
plt.tight_layout()
plt.show()

