import pandas as pd
import numpy as np

# Example delay ranges and stage order
stage_order = ['Arrival', 'Start', 'End', 'Complete', 'Deliver']
delay_ranges = {
    'Arrival': (0, 0),
    'Start': (1, 10),
    'End': (5, 15),
    'Complete': (2, 8),
    'Deliver': (3, 20)
}

# Drop rows where either 'Stage' or 'Business Date' is NaN
df = df[df['Stage'].notna() & df['Business Date'].notna()].copy()

# Filter stages to valid ones only (optional safety step)
df = df[df['Stage'].isin(stage_order)].copy()

# Set ordered stage for sorting
df['Stage'] = pd.Categorical(df['Stage'], categories=stage_order, ordered=True)

# Sort the DataFrame
df = df.sort_values(['Business Date', 'Stage'])

# Set base time (e.g., 1:00 PM)
base_time = pd.to_datetime("13:00", format="%H:%M")

# Function to generate delay and actual time
def generate_delays(group):
    cumulative_delay = 0
    delay_list = []
    time_list = []

    for stage in group['Stage']:
        min_d, max_d = delay_ranges.get(stage, (0, 0))
        delay = np.random.randint(min_d, max_d + 1)
        cumulative_delay += delay
        delay_minutes = 0 if stage == 'Arrival' else cumulative_delay
        delay_list.append(delay_minutes)
        time_list.append((base_time + pd.to_timedelta(delay_minutes, unit='m')).strftime('%-I:%M %p'))

    group['Delay (min)'] = delay_list
    group['Actual Time'] = time_list
    return group

# Group by Business Date safely
df = df.groupby('Business Date', group_keys=False).apply(generate_delays)

# Final output
print(df)
