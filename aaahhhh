import pandas as pd
import numpy as np

# Sample DataFrame
data = {
    'AC': [1, 2, 3, 4, np.nan],
    '1': [1, 3, 3, 4, np.nan],
    '2': [2, 2, 3, 5, np.nan],
    '34': [3, 2, 3, 6, np.nan],
    'Consider_NaN_As_Mismatch': [True, False, True, False, True]  # New column to toggle NaN behavior
}

df = pd.DataFrame(data)

# Function to check if 'AC' value is found in the other columns
def check_difference(row):
    found_in = []
    consider_nan_as_mismatch = row['Consider_NaN_As_Mismatch']  # Read the flag from the new column
    
    # Mapping of original column names to shorter names for the output
    col_name_map = {
        '1': 'Col_1',
        '2': 'Col_2',
        '34': 'Col_34'
    }
    
    for col in ['1', '2', '34']:  # Columns to compare
        ac_value = row['AC']
        col_value = row[col]
        
        # Check if we should treat NaN as a mismatch
        if consider_nan_as_mismatch:
            if pd.isna(ac_value) or pd.isna(col_value):
                continue  # Skip this column if either value is NaN
        if ac_value == col_value:
            found_in.append(col_name_map[col])  # Use the short name for the column
    
    if found_in:
        return ', '.join(found_in)  # Return columns where value matches 'AC'
    else:
        return f"Not found in Col_1, Col_2, Col_34"  # If no match, return this message

# Apply the function to each row
df['Differences'] = df.apply(lambda row: check_difference(row), axis=1)

# Print the updated DataFrame
print(df)