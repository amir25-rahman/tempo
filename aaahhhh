import pandas as pd
import numpy as np

# Create the DataFrame
data = {
    'AC': [5,5,5,5,5,5], 
    'TD': [np.nan,np.nan,5,5,5,6], 
    'PF': [np.nan,np.nan,5,5,np.nan,7],
    'SP': [np.nan,6,5,3,np.nan,8],
    'AF': [np.nan,np.nan,5,0,np.nan,9] 
}

df = pd.DataFrame(data)

# Create a custom column with values or NaN
df['Data_Flag'] = df.apply(lambda row: 'Data Missing in E' if row[['TD', 'PF', 'SP', 'AF']].isna().all() else 'Data Exists', axis=1)
df['Data_Differ'] = df.apply(lambda row: ', '.join([col for col in ['TD', 'PF', 'SP', 'AF'] if row['AC'] != row[col] and pd.notna(row[col])]), axis=1)
df['Data_Differ_NaN'] = df.apply(lambda row: ', '.join([col for col in ['TD', 'PF', 'SP', 'AF'] if (row['AC'] != row[col]) or pd.isna(row[col])]), axis=1)
df['All_Differ'] = df.apply(lambda row: 'Yes' if all([(row['AC'] != row[col]) or pd.isna(row[col]) for col in ['TD', 'PF', 'SP', 'AF']]) else 'No', axis=1)
df['Count_Differ_NaN'] = df.apply(lambda row: sum([(row['AC'] != row[col]) or pd.isna(row[col]) for col in ['TD', 'PF', 'SP', 'AF']]), axis=1)
df['Count_Differ'] = df.apply(lambda row: sum([(row['AC'] != row[col]) and pd.notna(row[col]) for col in ['TD', 'PF', 'SP', 'AF']]), axis=1)
# Display the result
# Display the result
print(df)

def categorize_row(row):
    cols_to_check = ['TD', 'PF', 'SP', 'AF']
    
    all_missing = row[cols_to_check].isna().all()  # All columns are NaN
    all_match_with_nan = all((row[col] == row['AC']) or pd.isna(row[col]) for col in cols_to_check)  # All match AC, NaN is OK
    all_match_no_nan = all(row[col] == row['AC'] for col in cols_to_check if pd.notna(row[col])) and not row[cols_to_check].isna().any()  # No NaNs, all match AC
    all_mismatch = all((row[col] != row['AC']) or pd.isna(row[col]) for col in cols_to_check)  # All differ (including NaN)
    some_mismatch = any((row[col] != row['AC']) or pd.isna(row[col]) for col in cols_to_check)  # At least one differs
    
    if all_missing:
        return "Data Missing in E"
    elif all_match_no_nan:
        return "Data Fully Matches (No NaN)"
    elif all_match_with_nan:
        return "Data Fully Matches (Including NaN)"
    elif all_mismatch:
        return "All Data Mismatch"
    elif some_mismatch:
        return "Some Data Mismatch"
    else:
        return "Data Exists"

# Apply the function to create the flag column
df['categorize'] = df.apply(categorize_row, axis=1)

# Display the result
print(df)


######################
STATS
######################

stats_summary = {
    "Total Rows": len(df),
    "Data Missing in E": (df['categorize'] == "Data Missing in E").sum(),
    "Data Fully Matches (No NaN)": (df['categorize'] == "Data Fully Matches (No NaN)").sum(),
    "Data Fully Matches (Including NaN)": (df['categorize'] == "Data Fully Matches (Including NaN)").sum(),
    "All Data Mismatch": (df['categorize'] == "All Data Mismatch").sum(),
    "Some Data Mismatch": (df['categorize'] == "Some Data Mismatch").sum(),
    "Total Cells Differing (NaN included)": df['Count_Differ_NaN'].sum(),
    "Total Cells Differing (NaN excluded)": df['Count_Differ'].sum(),
}

# Convert to DataFrame for better display
stats_df = pd.DataFrame(stats_summary.items(), columns=["Category", "Count"])
print(stats_df)


#################
DESCRIPTION
#################
6 total rows were analyzed.

2 rows had all missing data (NaN).

1 row fully matched AC with no NaN.

2 rows matched AC if NaN was ignored.

1 row had all values different from AC.

3 rows had at least some mismatched values.

Total mismatched cells (NaN included): 14.

Total mismatched cells (NaN excluded): 7.

