import pandas as pd
import numpy as np

# Create the DataFrame
data = {
    'UOI ID': [101, np.nan, 102, np.nan, 103, np.nan,102], 
    'BB ID': [2001, 2002, 2003, 2004, 2005, 2006,2084],  
    'AC': [5,5,5,5,5,5,9], 
    'TD': [np.nan,np.nan,5,5,5,6,4], 
    'PF': [np.nan,np.nan,5,5,np.nan,7,9],
    'SP': [np.nan,6,5,3,np.nan,8,9],
    'AF': [np.nan,np.nan,5,0,np.nan,9,9] 
}


df = pd.DataFrame(data)
df['UOI ID'] = df.apply(lambda row: row['BB ID'] if pd.isna(row['UOI ID']) else row['UOI ID'], axis=1)
df['UOI ID'] = df['UOI ID'].fillna("NO unique identity")


# Create a custom column with values or NaN
df['Data_Flag'] = df.apply(lambda row: 'Data Missing in E' if row[['TD', 'PF', 'SP', 'AF']].isna().all() else 'Data Exists', axis=1)
df['Data_Differ'] = df.apply(lambda row: ', '.join([col for col in ['TD', 'PF', 'SP', 'AF'] if row['AC'] != row[col] and pd.notna(row[col])]), axis=1)
df['Data_Differ_NaN'] = df.apply(lambda row: ', '.join([col for col in ['TD', 'PF', 'SP', 'AF'] if (row['AC'] != row[col]) or pd.isna(row[col])]), axis=1)
df['All_Differ'] = df.apply(lambda row: 'Yes' if all([(row['AC'] != row[col]) or pd.isna(row[col]) for col in ['TD', 'PF', 'SP', 'AF']]) else 'No', axis=1)
df['Count_Differ_NaN'] = df.apply(lambda row: sum([(row['AC'] != row[col]) or pd.isna(row[col]) for col in ['TD', 'PF', 'SP', 'AF']]), axis=1)
df['Count_Differ'] = df.apply(lambda row: sum([(row['AC'] != row[col]) and pd.notna(row[col]) for col in ['TD', 'PF', 'SP', 'AF']]), axis=1)
# Display the result
# Display the result
print(df)

def categorize_row(row):
    cols_to_check = ['TD', 'PF', 'SP', 'AF']
    
    all_missing = row[cols_to_check].isna().all()  # All columns are NaN
    all_match_with_nan = all((row[col] == row['AC']) or pd.isna(row[col]) for col in cols_to_check)  # All match AC, NaN is OK
    all_match_no_nan = all(row[col] == row['AC'] for col in cols_to_check if pd.notna(row[col])) and not row[cols_to_check].isna().any()  # No NaNs, all match AC
    all_mismatch = all((row[col] != row['AC']) or pd.isna(row[col]) for col in cols_to_check)  # All differ (including NaN)
    some_mismatch = any((row[col] != row['AC']) or pd.isna(row[col]) for col in cols_to_check)  # At least one differs
    
    if all_missing:
        return "Data Missing in E"
    elif all_match_no_nan:
        return "Data Fully Matches (No NaN)"
    elif all_match_with_nan:
        return "Data Fully Matches (Including NaN)"
    elif all_mismatch:
        return "All Data Mismatch"
    elif some_mismatch:
        return "Some Data Mismatch"
    else:
        return "Data Exists"

# Apply the function to create the flag column
df['categorize'] = df.apply(categorize_row, axis=1)


######################
STATS
######################

grouped = df.groupby('UOI ID')

# Function to calculate stats for each group
def calculate_group_stats(group):
    total_rows = len(group)

    # Count the categories
    stats = {
        "Data Missing in E": (group['categorize'] == "Data Missing in E").sum(),
        "Data Fully Matches (No NaN)": (group['categorize'] == "Data Fully Matches (No NaN)").sum(),
        "Data Fully Matches (Including NaN)": (group['categorize'] == "Data Fully Matches (Including NaN)").sum(),
        "All Data Mismatch": (group['categorize'] == "All Data Mismatch").sum(),
        "Some Data Mismatch": (group['categorize'] == "Some Data Mismatch").sum(),
        "Total Cells Differing (NaN included)": group['Count_Differ_NaN'].sum(),
        "Total Cells Differing (NaN excluded)": group['Count_Differ'].sum(),
    }

    # Add percentages
    stats['Data Missing in E %'] = f"{(stats['Data Missing in E'] / total_rows) * 100:.2f}%"
    stats['Data Fully Matches (No NaN) %'] = f"{(stats['Data Fully Matches (No NaN)'] / total_rows) * 100:.2f}%"
    stats['Data Fully Matches (Including NaN) %'] = f"{(stats['Data Fully Matches (Including NaN)'] / total_rows) * 100:.2f}%"
    stats['All Data Mismatch %'] = f"{(stats['All Data Mismatch'] / total_rows) * 100:.2f}%"
    stats['Some Data Mismatch %'] = f"{(stats['Some Data Mismatch'] / total_rows) * 100:.2f}%"
    stats['Total Cells Differing (NaN included) %'] = f"{(stats['Total Cells Differing (NaN included)'] / (total_rows * 4)) * 100:.2f}%"
    stats['Total Cells Differing (NaN excluded) %'] = f"{(stats['Total Cells Differing (NaN excluded)'] / (total_rows * 4)) * 100:.2f}%"

    return pd.Series(stats)

# Apply stats calculation for each group and reset the index
stats_df = grouped.apply(calculate_group_stats).reset_index()

