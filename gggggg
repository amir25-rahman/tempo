# Ensure column names are correctly read
df.columns = df.columns.str.strip()

# Define the comment logic
def generate_comment(row):
    if str(row['Unnamed: 1']) == str(row['Unnamed: 2']):  # Check if Map row equals ID row
        return "MATCH"
    elif str(row['Unnamed: 1']) == str(row['Unnamed: 2']) and str(row['Unnamed: 1']) == str(row['Unnamed: 3']):
        return "OK"
    elif pd.isna(row['Unnamed: 3']):  # Check if Trans column is null
        return "Black"
    else:
        return ""

# Apply the function to create a new Comment column
df['Comment'] = df.apply(generate_comment, axis=1)




# Define the comment logic
def generate_comment(row):
    if row[1] ==  row[2]:  # Check if Map row equals ID row
        return "MATCH"
    elif row[1] == row[2] and row[1] == row[3]:
        return "OK"
    elif pd.isna(row[3]):  # Check if Trans column is null
        return "Black"
    else:
        return "NO COM"

# Apply the function to create a new Comment column
df['Comment'] = df.apply(generate_comment, axis=1)



WITH Ranked AS (
    SELECT *, 
           ROW_NUMBER() OVER (PARTITION BY CUP ORDER BY (SELECT NULL)) AS rn_cup,
           ROW_NUMBER() OVER (PARTITION BY BR ORDER BY (SELECT NULL)) AS rn_br
    FROM my_table
)
SELECT CUP, BR, IS_VAL 
FROM Ranked 
WHERE rn_cup = 1 AND rn_br = 1;
