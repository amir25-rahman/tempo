





DistinctFileCount = 
CALCULATE(
    DISTINCTCOUNT(MyTable[File Name]),
    ALLEXCEPT(MyTable, MyTable[Business Date], MyTable[App Name]),
    MyTable[Breach] = 1
)








import tarfile
import pickle

# Open the .tar.gz archive
with tarfile.open("your_archive.tar.gz", "r:gz") as tar:
    # List all files in the archive
    members = tar.getmembers()
    
    # Print filenames (optional, for inspection)
    for member in members:
        print(member.name)

    # Find the pickle file (by name or extension)
    pickle_member = next(m for m in members if m.name.endswith('.pkl'))

    # Extract and load the pickle file
    with tar.extractfile(pickle_member) as f:
        data = pickle.load(f)









import pandas as pd
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Font
from openpyxl.styles import Alignment
from openpyxl.utils import get_column_letter

def calculate_column_widths(df):
    """
    Calculate the maximum width needed for each column based on all content
    including headers and data
    """
    # Initialize with header lengths
    max_lengths = [len(str(col)) for col in df.columns]
    
    # Update with data lengths
    for index, row in df.iterrows():
        for i, value in enumerate(row):
            max_lengths[i] = max(max_lengths[i], len(str(value)))
    
    # Add some padding for better visibility
    return [length + 2 for length in max_lengths]

def export_dataframes_to_excel(dataframes_dict, output_file):
    """
    Export multiple dataframes to Excel with blue headers, white font, filters, 
    and frozen header row. If a sheet named 'Owner' exists, it will wrap text in
    the 'title' column. Additionally, hyperlinks will be added to the first column
    with 'google.com/(cell value)' for each cell (except header).
    
    Parameters:
    dataframes_dict (dict): Dictionary with sheet names as keys and dataframes as values
    output_file (str): Name of the output Excel file
    """
    # Create Excel writer object
    with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
        # Export each dataframe and format immediately
        for sheet_name, df in dataframes_dict.items():
            # Write dataframe to sheet
            df.to_excel(writer, sheet_name=sheet_name, index=False)
            
            # Get the worksheet
            worksheet = writer.sheets[sheet_name]
            
            # Format header row
            blue_fill = PatternFill(start_color='0000FF', end_color='0000FF', fill_type='solid')
            white_font = Font(color='FFFFFF', bold=True)
            
            # Apply formatting to header row
            for cell in worksheet[1]:
                cell.fill = blue_fill
                cell.font = white_font
            
            # Add filters
            max_row = worksheet.max_row
            max_col = worksheet.max_column
            worksheet.auto_filter.ref = f"A1:{get_column_letter(max_col)}{max_row}"
            
            # Freeze the first row
            worksheet.freeze_panes = 'A2'
            
            # Check if the sheet is 'Owner' and apply text wrapping to the 'title' column
            if sheet_name == 'Owner':
                # Find the index of the 'title' column
                title_column_index = df.columns.get_loc('title') + 1  # +1 to match Excel column (1-based)
                
                # Apply text wrapping to all cells in the 'title' column
                for row in worksheet.iter_rows(min_col=title_column_index, max_col=title_column_index, min_row=2, max_row=max_row):
                    for cell in row:
                        cell.alignment = Alignment(wrap_text=True)
            
            # Add hyperlinks to the first column (except header)
            for row in worksheet.iter_rows(min_col=1, max_col=1, min_row=2, max_row=max_row):
                for cell in row:
                    cell_value = str(cell.value)  # Convert cell value to string
                    url = f"http://google.com/{cell_value}"  # Construct the URL
                    cell.hyperlink = url  # Add the hyperlink
                    cell.style = 'Hyperlink'  # Optional: You can also style it as a hyperlink (blue text, underlined)
            
            # Calculate and set column widths (auto-fit)
            column_widths = calculate_column_widths(df)
            for i, width in enumerate(column_widths, 1):
                column_letter = get_column_letter(i)
                worksheet.column_dimensions[column_letter].width = width

# Example usage
if __name__ == "__main__":
    # Sample dataframes (replace with your actual dataframes)
    product_df = pd.DataFrame({
        'product_id': [1, 2, 3],
        'name': ['Product A', 'Product B', 'Product C'],
        'price': [10.99, 20.99, 15.99]
    })
    
    customers_df = pd.DataFrame({
        'customer_id': [1, 2, 3],
        'name': ['John Doe', 'Jane Smith', 'Bob Johnson'],
        'email': ['john@example.com', 'jane@example.com', 'bob@example.com']
    })
    
    supplier_df = pd.DataFrame({
        'supplier_id': [1, 2, 3],
        'name': ['Supplier X', 'Supplier Y', 'Supplier Z'],
        'contact': ['123-456-7890', '234-567-8901', '345-678-9012']
    })
    
    # Owner sheet with a 'title' column
    owner_df = pd.DataFrame({
        'owner_id': [1, 2],
        'title': ['CEO of Company A with long title', 'CTO of Company B with an even longer title that should wrap'],
        'name': ['Alice', 'Bob']
    })
    
    # Create dictionary of dataframes
    dataframes = {
        'Products': product_df,
        'Customers': customers_df,
        'Suppliers': supplier_df,
        'Owner': owner_df  # Add the Owner sheet
    }
    
    # Export to Excel with formatting
    export_dataframes_to_excel(dataframes, 'output.xlsx')
